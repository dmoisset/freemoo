
SERVICES PROVIDED BY A FREEMOO SERVER:

GAME STATUS
  Name: "game_status"
  Provided: immediatly after the connection or after "players_list"
            until connection close
  Description: rules of the server and basic status of the game. Note that
               this service does not requires authentication.
  Format: "ibbiiibbbi", <<open_slots, finished, started,
                        galaxy_size, galaxy_age, start_tech_level,
                        tactical_combat, random_events, antaran_attacks,
                        date>>

PLAYERS LIST
  Name: "players_list"
  Provided: immediatly after the connection or after "game_status"
            until connection close
  Description: list of players logged in, and basic status info on each.
  Format: "i" <<count>>, followed by sequence of
          "isiib", <<id, name, state, color, connected>>

GALAXY
  Name: "galaxy"
  Provided: Before game_status.started is set
  Description: Global galaxy map (star positions and colors)
  Format: "rri" <<limit.x, limit.y, count>>, followed by sequence of
          "oiirr" <<id, kind, size, x, y>>

STAR
  Name: "star"+id (id is a digit sequence = star_id) 
  Provided: Before adding star id to player's set of known star ids
  Description: Full star description (star name, planet info)
  Format: "si" <<name, planets.count>>, followed by a sequence of
          "iiiiiii" <<size, climate, minerals, gravity, type, special, orbit>>

FLEET
  Name: "fleet"+id (id is a digit sequence = fleet_id) 
  Provided: Before reporting fleet on scanner.
  Description: Full fleet description
  Format: ""

PLAYER
  Name: "player"+id (id is a digit sequence = player_id) 
  Provided: Before game_status.started is set
  Description: Detailed player description
  Format: "i" <<count>, followed by a sequence of
             "i" <<star_id>> (this is the known_stars list)

SCANNER
  Name: n+":scanner" (n is a digit sequence = player id)
  Provided: Before game_status.started is set
  Descriptions: List of detected fleets for player n.
  Format: "i" <<count>>, followed by a sequence of
          "oioirr" <<owner, eta, destination, ships.count, x, y>>, and
            "ii" <<size, picture>> (for each ship of the fleet)
  when `eta'=0, the fleet is in orbit around `destination', when `eta'/=0,
  the fleet is travelling to `destination'

TURN SUMMARY
  Name: n+":turn_summary" (n is a digit sequence = player id)
  Provided: Before game_status.started is set
  Description: Events for this turn, for player n.
  Format: "i" <<count>>, followed by a sequence of
          "i" <<kind>>, followed by a kind-dependent format per event:
          event_explored: "i" <<id>>, id of explored star.
          event_finished_production: "iis" <<id, kind, name>>, id of colony; product kind; name when it is a ship.

CHAT MESSAGES
  Name: "chatroom"
  Provided: when the Join-Accept is sent, until connection close
  Description: messages from chat
  Format: "iss", <<color, destinations, message_said>>
          color can be 0 (server message)

SERVICE
  Name: "name"
  Provided: 
  Description:
  Format:

