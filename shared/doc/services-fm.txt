
SERVICES PROVIDED BY A FREEMOO SERVER:

GAME STATUS
  Name: "game_status"
  Provided: immediatly after the connection or after "players_list"
            until connection close
  Description: rules of the server and basic status of the game. Note that
               this service does not requires authentication.
  Format: "ibbiiibbbi", <<open_slots, finished, started,
                        galaxy_size, galaxy_age, start_tech_level,
                        tactical_combat, random_events, antaran_attacks,
                        date>>

PLAYERS LIST
  Name: "players_list"
  Provided: immediatly after the connection or after "game_status"
            until connection close
  Description: list of players logged in, and basic status info on each.
  Format: "i" <<count>>, followed by sequence of
          "isssiiiib", <<id, name, ruler_name, race_name, race_id, race_picture, color, state, connected>>

GALAXY
  Name: "galaxy"
  Provided: Before game_status.started is set
  Description: Global galaxy map (star positions and colors)
  Format: "rri" <<limit.x, limit.y, star_count>>, then many
          "iiirr" <<id, kind, size, x, y>>, one for each star

STAR
  Name: "star"+id (id is a digit sequence = star_id) 
  Provided: Before adding star id to player's set of known star ids
  Description: Full star description (star name, planet info)
  Format: "sii" <<name, wormhole_id, planets.count>>, followed by a sequence of
          "iiiiiii" <<orbit, size, climate, minerals, gravity, type, special>>
          wormhole can be -1.  This means 'no wormhole'

FLEET
  Name: "fleet"+id (id is a digit sequence = fleet_id) 
  Provided: Before reporting fleet on scanner or new_fleets.
  Description: Abridged fleet description.
  Format: "iiiibirr" <<owner_id, eta, orbiting, destination,
                       has_colonization_orders, ships_count, x, y>>,
          followed by a sequence of
          "ii<msg>" <<id, ship_type, ...>> for each ship of the fleet.
            <msg> depends of the type of the ship:
                starships: "iii" <<creator_id, size, picture>>
                colony ships: "i" <<creator_id>>
  `orbiting' and `destination may be -1, which means "none".

SHIP
  Name: "ship"+id (id is a digit sequence = ship_id)
  Provided: Before reporting ship on fleet.
  Description: Full ship description.
  Format: Format depends of the type of ship.
                starships: "sr" <<name, fuel_range>>
                colony ships: "ii" <<star_to_colonize, orbit_to_colonize>>
                                 (if star_to_colonize = -1 then will not colonize)

PLAYER
  Name: "player"+id (id is a digit sequence = player.id) 
  Provided: Before game_status.started is set
  Description: Detailed player description
  Format: "siirbiiii" <<ruler_name, money, research, fuel_range, has_capitol, knows_stars,
                    visited_stars, colony_count, known_construction>>, 
                    followed by a sequence of
          "i" <<star_id>>
                 (this is the known_star list), followed by a sequence of
          "i" <<star_id>>
                 (this is the visited_star list), followed by a sequence of
          "iii" <<star_id, orbit, colony_id>>, followed by a sequence of
          "i" <<product_id>>.  If at any point a product_id is greater than
                product_max, it's followed by a starship design, given by
                a message like provided by the Ship service.

COLONY
  Name: "colony"+id (id is a digit sequesnce = colony.id)
  Provided: Before reporting colony on player.
  Description: Detailed colony description.
  Format: "i" <<producing>> if producing is greater than product_max, then
          this is followed by a complete starship design description, like is
          described in the SHIPn service.  Then comes
          "ibiiii" <<produced, has_bought, population, terraformed,
                         populators_count, constructions_count>>,
             followed by a sequence of
          "iibiib" <<id, race_id, captive (not assimilated), task, single_task,
                     is_android>> one per populator,
             followed by a sequence of
          "i" <<product_id>> one per construction.

RACE
  Name: "race"+id (id is a digit sequence = race.id)
  Provided: Before game_status.started is set
  Description: Detailed description of the player's race.
  Format: "ssiiiiiiiiiiiiiibbbbbbbbbbbbbbbbb" <<name, homeworld_name, picture,
          population_growth, farming_bonus, industry_bonus,
          science_bonus, money_bonus, ship_defense_bonus,
          ship_attack_bonus, ground_combat_bonus, spying_bonus,
          government, homeworld_size, homeworld_gravity,
          homeworld_richness, ancient_artifacts, aquatic,
          subterranean, cybernetic, lithovore, repulsive, charismatic,
          uncreative, creative, tolerant, fantastic_trader,
          telepathic, lucky, omniscient, stealthy, transdimensional, warlord>>

SCANNER
  Name: n+":scanner" (n is a digit sequence = player id)
  Provided: Before game_status.started is set
  Description: List of detected fleets for player n, not including fleets
                owned by n.
  Format: "i" <<count>>, followed by a sequence of
          "iiiirr" <<owner, eta, destination, ships.count, x, y>>, and
          "i<msg>" <<ship_type, ...>> for each ship of the fleet.
            <msg> depends of the type of the ship:
                starships: "iii" <<creator_id, size, picture>>
                colony ships: "i" <<creator_id>>

  when `eta'=0, the fleet is in orbit around `destination', when `eta'/=0,
  the fleet is travelling to `destination'

ENEMY COLONIES
  Name: n + ":enemy_colonies" (n is a digit sequence = player id)
  Provided: Before game_status.started is set
  Descriptions: List of known enemy colonies for player n.
  Format: "i" <<count>>, followed by a sequence of
          "iii" <<star_id, orbit, owner_id>>, one for each enemy colony.

TURN SUMMARY
  Name: n+":turn_summary" (n is a digit sequence = player id)
  Provided: Before game_status.started is set
  Description: Events for this turn, for player n.
  Format: "i" <<count>>, followed by a sequence of
          "i" <<kind>>, followed by a kind-dependent format per event:
          event_explored: "isii" <<id, name, star_special, planet_special>>
                 id and name of explored star, and if something special was found.
          event_finished_production: "iis" <<id, kind, name>>, id of colony; product kind; name when it is a ship.
          event_starvation: "iii" <<id, food, production>> id of colony; food shortage; production shortage
          event_space_flux: no data needed

NEW FLEETS
  Name: n+":new_fleets" (n is a digit sequence = player id)
  Provided: Before game_status.started is set
  Description: List of id's of new fleets to add.
  Subscription message: full list of fleet ids, same format
  Format: "i" <<count>>, followed by a sequence of
          "i" <<id>>, id of fleet

CHAT MESSAGES
  Name: "chatroom"
  Provided: when the Join-Accept is sent, until connection close
  Description: messages from chat
  Format: "iss", <<color, destinations, message_said>>
          color can be 0 (server message)

DIALOGS
  Name: "n:dialogs" (n is a digit sequence = player id)
  Provided: Before game_status.started is set
  Description: informs about dialogs that client should answer to
  Format:
    - Remove dialog: "ii" <<action, id>>, action=0
    - Add dialog: "iiis" <<action, id, kind, info>>, action=1, followed by dialog
                  specific information
    - Subscription "ii" <<action, count>>, action=2, followed by count
      "iis" <<id, kind, info>>

XENO_REPOSITORY
  Name: "xeno_repository"
  Provided: Before game_status.started is set
  Description: gives enough information about races.  Eventually this service
     will control how much you know about each race
  Format: "iii" <<natives_id, androids_id, races_count>> followed
        by a sequence of `races_count' "i" <<race_id>>


SERVICE
  Name: "name"
  Provided: 
  Description:
  Subscription message: (if different from update)
  Format:

